@page "/monthlyexpenses"
@using Sakuri.Data
@using Sakuri.Areas.Identity.Data
@using Sakuri.Services
@using Sakuri.Models
@inject IModalService modal 
@inject ApplicationDbContext Context
@inject MoneyInformationService MoneyService
@inherits OwningComponentBase<AccountService>
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<div class="top-row pl-0 navbar navbar-dark">
    <h1>Monthly Expenses</h1>
     <div class="dropdown" style="margin-left:55%;margin-bottom:10px">  
      <button class="btn-primary btn button-add" data-toggle="dropdown"> Filter</button>
      <div class="dropdown-menu">
          <a class="dropdown-item">Category</a>
          <a class="dropdown-item">Price</a>
          <a class="dropdown-item">Date</a>
      </div>
 </div>
    <button @onclick="@ShowModal" class="btn-primary btn button-add" style="margin-bottom:10px">Add product</button>
</div>

<p><b>Expenses for this month:</b></p>

@if (itemList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Category</th>
                <th>Date</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in itemList)
            {
                <tr>
                    <td>@item.ItemName</td>
                    <td>@item.ItemCategory</td>
                    <td>@item.Time</td>
                    <td>$@item.ItemPrice</td>
                </tr>
            }
            
            <a class = "price" style="position:relative; left:168%; top: 35px;">Total Cost: <b>$@totalCost</b></a>
            
        </tbody>
    </table>
}

@code {
    [CascadingParameter] public IModalService ?Modal { get; set; }
    int totalCost;
    IList<Items> ?itemList;
    public void ShowModal()
    {
        var options = new ModalOptions()
        {
            HideCloseButton = true,
            Animation = ModalAnimation.FadeInOut(.25)
        };

        Modal?.Show<AddProduct>("Products", options);
    }
    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        itemList = Service.GetAllItems(user.Identity.Name);
        foreach (var price in itemList)
        {
            totalCost = totalCost + @price.ItemPrice;
        }
    }

}
