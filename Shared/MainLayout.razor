@inherits LayoutComponentBase
@using Blazored.Toast.Configuration
@inject ViewOptionService ViewOption

<div class="page @GetCssClass()">
    <AuthorizeView>
        <Authorized>
            <div class="sidebar ViewOption.Toggle()">
                <NavMenu />
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="top-row px-4 auth">
                <a href="/" style="font-size: 25px">Sakuri</a>
            </div>
            <div class="sidebar @ViewOption.NavBarClass">
                <NavMenu />
            </div>
        </NotAuthorized>
    </AuthorizeView>
    <div class="main">
        <div class="top-row px-4 auth">
            <LoginDisplay />
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
            <svg width="45px" height="80%" transform="scale(.6)" style="fill:var(--rose); margin-left:1rem;"xmlns="http://www.w3.org/2000/svg">
                <path d="M22 41c10.4934.0 19-8.5066 19-19C41 11.5066 32.4934 3 22 3 11.5066 3 3 11.5066 3 22s8.5066 19 19 19zM7 22C7 13.7157 13.7157 7 22 7V37C13.7157 37 7 30.2843 7 22z"></path>
                <rect style="opacity:0" x="5" y="5" width="40" height="40" @onclick="ChangeTheme" />
            </svg>
        </div>

        <div class="content px-4 @GetCssClass()">
            @Body 
        </div>
        
    </div>
    
</div>

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="5"
                SuccessClass="success-toast-override"
                />
@code {
    private string selectedTheme = "Light";
    
    private string GetCssClass()
    {
        if (selectedTheme == "Light")
        {
            return String.Empty;
        }
        else
        {
            return "dark-mode";
        }
    }
    void ChangeTheme()
    {
        if (selectedTheme == "Light")
        {
            selectedTheme = "dark-mode";
        }
        else
        {
            selectedTheme = "Light";
        }
    }
    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }
}
